@startuml

class ArrayList<T>

package aplicacao {

    class App<<singleton>> {
        - PlayerDeMusica player
        - List<Playlist> playlists
        - Estatistica estatisticas
        + void adicionarPlaylist(Playlist playlist)
        + void removerPlaylist(Playlist playlist)
        + void limparPlaylists()
    }

    class PlayerDeMusica<<singleton>> {
        - ListaNavegavel<Musica> fila
        + void irParaProxima()
        + void irParaAnterior()
        + void tocar()
        + void tocar(int segundoInicial)
        + void pausar()
        + void adicionarNaFila(Musica musica)
        + void adicionarNaFila(Playlist playlist)
        + void limparFila()
        + void removerDaFila(Musica musica)
    }

    class Estatistica<<singleton>> {
        - int reproducoesTotal
        - int reproducoesMes
        - Musica musicaMaisTocadaTotal
        - Musica musicaMaisTocadaMes
    }

    package entidades {

        class Musica {
            - int id
            - String nome
            - String artista
            - String album
            - String genero
            - int ano
            - int duracao
            - int reproducoes
            - LocalDateTime adicionadaEm
            - File arquivo
        }

        note right of Musica::duracao
         É a duração da música
         em segundos
        end note

        class Playlist {
            - int id
            - String nome
            - ListaNavegavel<Musica> musicas
            + int getDuracaoTotal()
            + void adicionarMusica(Musica musica)
            + void removerMusica(Musica musica)
            + void limpar()
        }
    }

}

package helpers {

    class MusicaHelper<<singleton>> {
        + Musica carregarMusica(File arquivo)
        + Musica salvarMusica(File arquivo)
        + Musica editarTitulo(File arquivo, String nome)
        + Musica editarArtista(File arquivo, String artista)
        + Musica editarAlbum(File arquivo, String album)
        + Musica editarGenero(File arquivo, String genero)
        + Musica editarAnoLancamento(File arquivo, int ano)
    }

    class EstatisticaHelper<<singleton>> {
        + Estatistica carregarEstatistica()
        + Estatistica salvarEstatistica(Estatistica estatistica)
    }

    class PlaylistHelper {
        + Playlist carregarPlaylists()
        + Playlist salvarPlaylist(Playlist playlist)
    }

}

package DAO {

    class MusicaDAO<<interface>> {
        + List<Musica> getAllMusicas()
        + Musica getMusicaById(int id)
        + void addMusica(Musica musica)
        + void updateMusica(Musica musica)
        + void deleteMusica(int id)
    }

    class PlaylistDAO<<interface>> {
        + List<Playlist> getAllPlaylists()
        + Playlist getPlaylistById(int id)
        + void addPlaylist(Playlist playlist)
        + void updatePlaylist(Playlist playlist)
        + void deletePlaylist(int id)
    }

    class EstatisticaDAO<<interface>> {
        + Estatistica getEstatisticas()
        + updateEstatisticas(Estatistica estatistica)
    }

    class MusicaDAOImpl {
        - String DS
        - createTable()
        + MusicaDAOImpl()
        + List<Musica> getAllMusicas()
        + Musica getMusicaById(int id)
        + void addMusica(Musica musica)
        + void updateMusica(Musica musica)
        + void deleteMusica(int id)
    }

    class PlaylistDAOImpl {
        - String DS
        - createTable()
        + PlaylistDAOImpl()
        + List<Playlist> getAllPlaylists()
        + Playlist getPlaylistById(int id)
        + void addPlaylist(Playlist playlist)
        + void updatePlaylist(Playlist playlist)
        + void deletePlaylist(int id)
    }

    class EstatisticaDAOImpl {
        - String DS
        - createTable()
        + EstatisticaDAOImpl()
        + Estatistica getEstatisticas()
        + updateEstatisticas(Estatistica estatistica)
    }
}

package util {

    class ListaNavegavel<T> extends .ArrayList<T> {
            - int indexAtual
            + T getAtual()
            + boolean temProximo()
            + boolean temAnterior()
            + T irParaProximo()
            + T irParaAnterior()
            + T getProximo()
            + T getAnterior()
        }

}

App "1" *-- "1" PlayerDeMusica
App "1" *-- "*" Playlist
App "1" *-- "1" Estatistica
App --> MusicaHelper
App --> EstatisticaHelper
App --> PlaylistHelper
PlayerDeMusica "1" o-- "*" Musica
PlayerDeMusica::fila .. ListaNavegavel
Playlist "1" o-- "*" Musica
MusicaDAOImpl ..|> MusicaDAO
PlaylistDAOImpl ..|> PlaylistDAO
EstatisticaDAOImpl ..|> EstatisticaDAO

note as NotaSingleton
    Classes com o esteriótipo <<singleton>> são singletons e
    possuem o seguinte atributo e método:
    <code>
    private static T instance
    public  static T getInstance()
    </code>
end note
@enduml